@article{nornir:fgcs18,
 abstract = {Self-adaptation is an emerging requirement in parallel computing. It enables the dynamic selection of resources toallocate to the application in order to meet performance and power consumption requirements. This is particularly relevant in Fog Applications, where data is generated by a number of devices at a varying rate, according to usersâ€™ activity. By dynamically selecting the appropriate number of resources it is possible, for example, to use at each time step the minimum amount of resources needed to process the incoming data. Implementing such kind of algorithms may be a complex task, due to low-level interactions with the underlying hardware and to non-intrusive and low-overhead monitoring of the applications. For these reasons, in this paper we propose Nornir, a C++-based framework, which can be used to enforce performance and power consumption constraints on parallel applications running on shared memory multicores. The framework can be easily customized by algorithm designers to implement new self-adaptive policies. By instrumenting the applications in the \PARSEC\ benchmark, we provide to strategy designers a wide set of applications already interfaced to Nornir. In addition to this, to prove its flexibility, we implemented and compared several state-of-the-art existing policies, showing that Nornir can also be used to easily analyze different algorithms and to provide useful insights on them.},
 author = {De Sensi, Daniele and De Matteis, Tiziano and Danelutto, Marco},
 doi = {https://doi.org/10.1016/j.future.2018.05.012},
 issn = {0167-739X},
 journal = {Future Generation Computer Systems},
 keywords = {Self-adaptive, Power-aware, Quality of service, Data stream processing, Fog computing, Parallel computing},
 note = {},
 number = {},
 pages = { - },
 pdf = {http://pages.di.unipi.it/desensi/assets/pdf/2018_FGCS.pdf},
 title = {Simplifying self-adaptive and power-aware computing with Nornir},
 url = {https://www.sciencedirect.com/science/article/pii/S0167739X17326699},
 volume = {},
 year = {2018}
}

